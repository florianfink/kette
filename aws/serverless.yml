# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kette

custom:
  usersTableName: 'users-table-${self:provider.stage}'
  asstesTableName: 'assets-table-${self:provider.stage}'
  creatorIdIndex: 'users-table-creatorId-index-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  apiKeys:
    - ${self:provider.stage}-allverta
  runtime: nodejs8.10
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:us-east-1:*:*"
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    ASSETS_TABLE: ${self:custom.asstesTableName}
    USERS_TABLE_CREATORID_INDEX: ${self:custom.creatorIdIndex}
plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:
  register:
    handler: handlerRegister.register
    events:
      - http:
              method: post
              path: register
              cors: true
              private : true
  webHookAssets:
    handler: handlerWebHookAssets.updateAsset
    events:
      - http:
              method: post
              path: assets/{id}
  getAssets:
    handler: handlerAssets.getAssets
    events:
      - http:
              method: get
              path: assets
              cors: true
              authorizer: aws_iam
  getUsers:
    handler: handlerUsers.getUsers
    events:
      - http:
              method: get
              path: users
              cors: true
              private : true
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: creatorId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.USERS_TABLE_CREATORID_INDEX}
            KeySchema:
              -
                AttributeName: creatorId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    AssetsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uniqueAssetId
            AttributeType: S
        KeySchema:
          -
            AttributeName: uniqueAssetId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.asstesTableName}