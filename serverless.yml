service: kette

custom:
  apiKeysTableName: 'apiKeys-table-${self:provider.stage}'
  userIdIndex : 'apiKeys-table-userId-index-${self:provider.stage}'
  usersTableName: 'users-table-${self:provider.stage}'
  creatorIdIndex: 'users-table-creatorId-index-${self:provider.stage}'
  assetTransactionsTableName: 'assetTransactions-table-${self:provider.stage}'
  ethAddressIndex : 'assetTransactions-table-ethAddress-index-${self:provider.stage}'
  uniqueAssetIdIndex : 'assetTransactions-table-uniqueAssetId-index-${self:provider.stage}'

  metaDataBicycleTableName : "metaDataBicycle-table-${self:provider.stage}"
  metadataBicycleVendorIndex : 'metaDataBicycle-table-vendor-index-${self:provider.stage}'
  metadataBicycleSerialNumberIndex : 'metaDataBicycle-table-serialNumber-index-${self:provider.stage}'
  metadataBicycleFrameNumberIndex : 'metaDataBicycle-table-frameNumber-index-${self:provider.stage}'

  encryptionKeyId : ${env:ENCRYPTION_KEYID_${self:provider.stage}} 
  usagePlanId : ${env:USAGEPLANID_${self:provider.stage}} 
  webHookBaseUrl: ${env:WEBHOOKBASEURL_${self:provider.stage}} 
  
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  apiKeys:	
    - ${self:provider.stage}-forTests
  usagePlan:	
    quota:	
      limit: 50000	
      offset: 0	
      period: MONTH	
    throttle:	
      burstLimit: 200	
      rateLimit: 100
  runtime: nodejs8.10
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action: 'ssm:GetParameter'
      Resource:
        - "arn:aws:ssm:eu-central-1:*:parameter/*"
    - Effect: Allow
      Action: 'apigateway:POST'
      Resource:
        - "arn:aws:apigateway:eu-central-1::/*"
    - Effect: Allow
      Action: 
        - 'kms:Encrypt'
        - 'kms:Decrypt'
      Resource:
        - "arn:aws:kms:eu-central-1:*:key/${self:provider.environment.ENCRYPTION_KEYID}"
  environment:
    APIKEYS_TABLE: ${self:custom.apiKeysTableName}
    APIKEYS_TABLE_USERID_INDEX : ${self:custom.userIdIndex}
    USERS_TABLE: ${self:custom.usersTableName}
    USERS_TABLE_CREATORID_INDEX: ${self:custom.creatorIdIndex}
    ASSETTRANSACTIONS_TABLE: ${self:custom.assetTransactionsTableName}
    ASSETTRANSACTIONS_TABLE_ETHADDRESS_INDEX : ${self:custom.ethAddressIndex}
    ASSETTRANSACTIONS_TABLE_UNIQUEASSETID_INDEX : ${self:custom.uniqueAssetIdIndex}
    
    METADATABICYCLES_TABLE_VENDOR_INDEX : ${self:custom.metadataBicycleVendorIndex}
    METADATABICYCLES_TABLE_SERIALNUMBER_INDEX : ${self:custom.metadataBicycleSerialNumberIndex}
    METADATABICYCLES_TABLE_FRAMENUMBER_INDEX : ${self:custom.metadataBicycleFrameNumberIndex}
    METADATABICYCLE_TABLE: ${self:custom.metaDataBicycleTableName}

    STAGE: ${self:provider.stage}
    
    ENCRYPTION_KEYID: ${self:custom.encryptionKeyId}
    USAGEPLAN_ID: ${self:custom.usagePlanId}
    WEBHOOK_BASE_URL : ${self:custom.webHookBaseUrl}
    
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
functions:
  check:
    handler: handlerCheck.check
    events:
      - http:
              method: get
              path: check
              cors: true
  registerFor:
    handler: handlerRegisterFor.registerFor
    events:
      - http:
              method: post
              path: registerFor
              cors: true
              private : true
  getAssetsFor:
    handler: handlerGetAssetsFor.getAssets
    events:
      - http:
              method: get
              path: assetsFor/{id}
              cors: true
              private : true
  register:
    handler: handlerRegister.register
    events:
      - http:
              method: post
              path: register
              cors: true
              authorizer: aws_iam
  updateTransaction:
    handler: handlerUpdateTransaction.updateTransaction
    events:
      - http:
              method: post
              path: transactions/{id}
  createApiKey:
    handler: handlerCreateApiKey.createApiKey
    events:
      - http:
              method: post
              path: apiKeys
              cors: true
              authorizer: aws_iam
  getApiKeys:
    handler: handlerGetApiKeys.getApiKeys
    events:
      - http:
              method: get
              path: apiKeys
              cors: true
              authorizer: aws_iam

  getAssets:
    handler: handlerGetAssets.getAssets
    events:
      - http:
              method: get
              path: assets
              cors: true
              authorizer: aws_iam
  getUsers:
    handler: handlerGetUsers.getUsers
    events:
      - http:
              method: get
              path: users
              cors: true
              private : true
  getParameters:
    handler: handlerGetParameters.getParameters
    events:
      - http:
              method: get
              path: parameters
              cors: true
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: creatorId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.USERS_TABLE_CREATORID_INDEX}
            KeySchema:
              -
                AttributeName: creatorId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    AssetTransactionsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: uniqueAssetId
            AttributeType: S
          -
            AttributeName: ethAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.ASSETTRANSACTIONS_TABLE_UNIQUEASSETID_INDEX}
            KeySchema:
              -
                AttributeName: uniqueAssetId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: ${self:provider.environment.ASSETTRANSACTIONS_TABLE_ETHADDRESS_INDEX}
            KeySchema:
              -
                AttributeName: ethAddress
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:custom.assetTransactionsTableName}
    ApiKeysDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: apiKey
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: apiKey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.APIKEYS_TABLE_USERID_INDEX}
            KeySchema:
              -
                AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:custom.apiKeysTableName}
    MetaDataBicycleTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uniqueAssetId
            AttributeType: S
          -
            AttributeName: vendor
            AttributeType: S
          -
            AttributeName: serialNumber
            AttributeType: S
          -
            AttributeName: frameNumber
            AttributeType: S
        KeySchema:
          -
            AttributeName: uniqueAssetId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: ${self:provider.environment.METADATABICYCLES_TABLE_FRAMENUMBER_INDEX}
            KeySchema:
              -
                AttributeName: frameNumber
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: ${self:provider.environment.METADATABICYCLES_TABLE_VENDOR_INDEX}
            KeySchema:
              -
                AttributeName: vendor
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: ${self:provider.environment.METADATABICYCLES_TABLE_SERIALNUMBER_INDEX}
            KeySchema:
              -
                AttributeName: serialNumber
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:custom.metaDataBicycleTableName}